// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/livefir/fir/examples/fira/ent/issue"
	"github.com/livefir/fir/examples/fira/ent/project"
)

// IssueCreate is the builder for creating a Issue entity.
type IssueCreate struct {
	config
	mutation *IssueMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ic *IssueCreate) SetCreateTime(t time.Time) *IssueCreate {
	ic.mutation.SetCreateTime(t)
	return ic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ic *IssueCreate) SetNillableCreateTime(t *time.Time) *IssueCreate {
	if t != nil {
		ic.SetCreateTime(*t)
	}
	return ic
}

// SetUpdateTime sets the "update_time" field.
func (ic *IssueCreate) SetUpdateTime(t time.Time) *IssueCreate {
	ic.mutation.SetUpdateTime(t)
	return ic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ic *IssueCreate) SetNillableUpdateTime(t *time.Time) *IssueCreate {
	if t != nil {
		ic.SetUpdateTime(*t)
	}
	return ic
}

// SetTitle sets the "title" field.
func (ic *IssueCreate) SetTitle(s string) *IssueCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *IssueCreate) SetDescription(s string) *IssueCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetID sets the "id" field.
func (ic *IssueCreate) SetID(u uuid.UUID) *IssueCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IssueCreate) SetNillableID(u *uuid.UUID) *IssueCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// SetOwnerID sets the "owner" edge to the Project entity by ID.
func (ic *IssueCreate) SetOwnerID(id uuid.UUID) *IssueCreate {
	ic.mutation.SetOwnerID(id)
	return ic
}

// SetNillableOwnerID sets the "owner" edge to the Project entity by ID if the given value is not nil.
func (ic *IssueCreate) SetNillableOwnerID(id *uuid.UUID) *IssueCreate {
	if id != nil {
		ic = ic.SetOwnerID(*id)
	}
	return ic
}

// SetOwner sets the "owner" edge to the Project entity.
func (ic *IssueCreate) SetOwner(p *Project) *IssueCreate {
	return ic.SetOwnerID(p.ID)
}

// Mutation returns the IssueMutation object of the builder.
func (ic *IssueCreate) Mutation() *IssueMutation {
	return ic.mutation
}

// Save creates the Issue in the database.
func (ic *IssueCreate) Save(ctx context.Context) (*Issue, error) {
	var (
		err  error
		node *Issue
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IssueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Issue)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IssueMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IssueCreate) SaveX(ctx context.Context) *Issue {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IssueCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IssueCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IssueCreate) defaults() {
	if _, ok := ic.mutation.CreateTime(); !ok {
		v := issue.DefaultCreateTime()
		ic.mutation.SetCreateTime(v)
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		v := issue.DefaultUpdateTime()
		ic.mutation.SetUpdateTime(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := issue.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IssueCreate) check() error {
	if _, ok := ic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Issue.create_time"`)}
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Issue.update_time"`)}
	}
	if _, ok := ic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Issue.title"`)}
	}
	if v, ok := ic.mutation.Title(); ok {
		if err := issue.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Issue.title": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Issue.description"`)}
	}
	if v, ok := ic.mutation.Description(); ok {
		if err := issue.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Issue.description": %w`, err)}
		}
	}
	return nil
}

func (ic *IssueCreate) sqlSave(ctx context.Context) (*Issue, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ic *IssueCreate) createSpec() (*Issue, *sqlgraph.CreateSpec) {
	var (
		_node = &Issue{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: issue.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: issue.FieldID,
			},
		}
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.CreateTime(); ok {
		_spec.SetField(issue.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ic.mutation.UpdateTime(); ok {
		_spec.SetField(issue.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ic.mutation.Title(); ok {
		_spec.SetField(issue.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(issue.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := ic.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.OwnerTable,
			Columns: []string{issue.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_issues = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IssueCreateBulk is the builder for creating many Issue entities in bulk.
type IssueCreateBulk struct {
	config
	builders []*IssueCreate
}

// Save creates the Issue entities in the database.
func (icb *IssueCreateBulk) Save(ctx context.Context) ([]*Issue, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Issue, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IssueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IssueCreateBulk) SaveX(ctx context.Context) []*Issue {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IssueCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IssueCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
