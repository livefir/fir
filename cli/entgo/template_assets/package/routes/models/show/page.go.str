package show

import (
	"context"
	[[- if .hasParent]]
	"fmt"	
	[[- end]]
	"log"
	"net/http"

	"[[.modelsPkg]]"
	"[[.utilsPkg]]"
	"[[.modelsPkg]]/[[.modelName]]"
	"github.com/adnaan/fir"
	"github.com/fatih/structs"
	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
)


type View struct {
	DB *models.Client
	fir.DefaultView
}

func (v *View) Content() string {
	return "[[.content]]/show"
}

func (v *View) Layout() string {
	return "[[.layout]]"
}

func (v *View) OnGet(w http.ResponseWriter, r *http.Request) fir.Page {
	id, err := uuid.Parse(chi.URLParam(r, "[[.modelName]]ID"))
	if err != nil {
		return fir.PageError(err, "invalid [[.modelName]] id")
	}
	[[.modelName]], err := v.DB.[[.modelNameTitled]].Query().
		Where([[.modelName]].ID(id)).
		[[ if .hasParent ]]
		WithOwner().
		[[ end ]]
		Only(r.Context())
	if err != nil {
		return fir.ErrNotFound(err, "[[.modelName]] not found")
	}

	return fir.Page{Data: structs.Map([[.modelName]])}
}

func (v *View) OnPost(w http.ResponseWriter, r *http.Request) fir.Page {
	var req update[[.modelNameTitled]]Req
	err := fir.DecodeForm(&req, r)
	if err != nil {
		return fir.PageError(err, "error decoding request")
	}

	id, err := uuid.Parse(chi.URLParam(r, "[[.modelName]]ID"))
	if err != nil {
		return fir.PageError(err, "invalid [[.modelName]] id")
	}
	req.id = id

	switch req.Action {
	case "update":
		[[.modelName]], err := update[[.modelNameTitled]](r.Context(), v.DB, req)
		if err != nil {
			return utils.PageFormError(err)
		}
		return fir.Page{Data: structs.Map([[.modelName]])}

	case "delete":
		if err := delete[[.modelNameTitled]](r.Context(), v.DB, id); err != nil {
			return fir.PageError(err, "error deleting [[.modelName]]")
		}
		http.Redirect(w, r, "/", http.StatusFound)
	default:
		return fir.PageError(err, "unknown request")

	}

	return fir.Page{}
}

func (v *View) OnEvent(event fir.Event) fir.Patchset {
	switch event.ID {
	case "[[.modelName]]-update":
		return on[[.modelNameTitled]]Update(v.DB, event)
	case "[[.modelName]]-delete":
		return on[[.modelNameTitled]]Delete(v.DB, event)
	default:
		glog.Errorf("unknown event: %s\n", event.ID)
		return nil
	}
}

type update[[.modelNameTitled]]Req struct {
	id          uuid.UUID
	Action      string `json:"action" schema:"action"`
	[[range .updateFormFields -]]
	[[.StructField]] [[.Type]] `json:"[[.Name]]" schema:"[[.Name]]"`
	[[end]]
}

func update[[.modelNameTitled]](ctx context.Context, db *models.Client, req update[[.modelNameTitled]]Req) (*models.[[.modelNameTitled]], error) {
	[[.modelName]], err := db.[[.modelNameTitled]].
		UpdateOneID(req.id).
		[[range .updateFormFields]]
		Set[[.StructField]](req.[[.StructField]]).
		[[end]]
		Save(ctx)
	return [[.modelName]], err
}

func delete[[.modelNameTitled]](ctx context.Context, db *models.Client, id uuid.UUID) error {
	return db.[[.modelNameTitled]].DeleteOneID(id).Exec(ctx)
}

func on[[.modelNameTitled]]Update(db *models.Client, event fir.Event) fir.Patchset {
	var req update[[.modelNameTitled]]Req
	if err := event.DecodeFormParams(&req); err != nil {
		return fir.PatchError(err)
	}

	id, err := uuid.Parse(chi.URLParamFromCtx(event.RequestContext(), "[[.modelName]]ID"))
	if err != nil {
		return fir.PatchError(err, "invalid [[.modelName]] id")
	}
	req.id = id

	[[.modelName]], err := update[[.modelNameTitled]](event.RequestContext(), db, req)
	if err != nil {
		return utils.PatchFormError(err)
	}

	patchset := append(
		fir.UnsetFormErrors("title", "description"),
		fir.Morph{
			Selector: "[[.modelName]]",
			HTML: &fir.Render{
				Template: "[[.modelName]]",
				Data: structs.Map([[.modelName]]),
			},
		})

	return patchset
}

func on[[.modelNameTitled]]Delete(db *models.Client, event fir.Event) fir.Patchset {
	[[- if .hasParent ]]
	[[.nodeParentName]]ID, err := uuid.Parse(chi.URLParamFromCtx(event.RequestContext(), "[[.nodeParentName]]ID"))
	if err != nil {
		return fir.PatchError(err, "invalid [[.nodeParentName]] id")
	}
	[[- end ]]

	id, err := uuid.Parse(chi.URLParamFromCtx(event.RequestContext(), "[[.modelName]]ID"))
	if err != nil {
		return fir.PatchError(err, "invalid [[.modelName]] id")
	}

	if err := delete[[.modelNameTitled]](event.RequestContext(), db, id); err != nil {
		return fir.PatchError(err)
	}
	return fir.Patchset{
		fir.Navigate{
			[[- if .hasParent ]]
				To: fmt.Sprintf("/%s/[[.modelNamePlural]]", [[.nodeParentName]]ID),
			[[- else ]]	
				To: "/",
			[[- end ]]
		},
	}
}